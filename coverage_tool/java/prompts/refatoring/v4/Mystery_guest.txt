---SYSTEMCONTENT---You are an expert Java developer. 

---USERCONTENT---

Let's start step by step. First, this test code contains a test smell known as "Mystery Guest", which occurs when a test method utilizes external resources (e.g. files, database, etc.). Second, I need a version of code that keeps the same test's intention but mitigates this smell.
One approach involves mocking objects in place of using external resources.

An one-shot example is provided to you to be used as a reference:

Example 1:
<Provided test code>
```
public void testPersistence() throws Exception {
    File tempFile = File.createTempFile("systemstate-", ".txt");
    try {
        SystemState a = new SystemState(then, 27, false, bootTimestamp);
        a.addInstalledApp("a.b.c", "ABC", "1.2.3");

        a.writeToFile(tempFile);
        SystemState b = SystemState.readFromFile(tempFile);

        assertEquals(a, b);
    } finally {
        //noinspection ConstantConditions
        if (tempFile != null) {
            //noinspection ResultOfMethodCallIgnored
            tempFile.delete();
        }
    }
}
```
<Refactored test code>
```
@Test
public void testPersistence_MockedFile() throws Exception {
  // Mock a File object
  File mockFile = Mockito.mock(File.class);

  // Mock file creation (can be more specific if needed)
  Mockito.when(mockFile.createNewFile()).thenReturn(true);

  // SystemState with mocked file
  SystemState a = new SystemState(then, 27, false, bootTimestamp);
  a.addInstalledApp("a.b.c", "ABC", "1.2.3");

  // Mock writing to file (replace with actual implementation logic)
  a.writeToFile(mockFile);

  // Mock reading from file (replace with actual implementation logic)
  SystemState b = SystemState.readFromFile(mockFile);

  // Assertions
  assertEquals(a, b);

  // Verify file creation was called (optional)
  Mockito.verify(mockFile).createNewFile();
}
```

Now provide the refactored test code for the code below, delimited by triple backticks.
Attention: Preserve all existing import statements in the Java code. You may introduce new packages as needed.

```
{test_code_with_smell_here}
```


